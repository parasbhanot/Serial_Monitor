/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simpleSerial;

import info.monitorenter.gui.chart.Chart2D.ToolTipType;
import info.monitorenter.gui.chart.IAxis;
import info.monitorenter.gui.chart.IAxis.AxisTitle;
import info.monitorenter.gui.chart.IAxisScalePolicy;
import info.monitorenter.gui.chart.IRangePolicy;
import info.monitorenter.gui.chart.ITrace2D;
import info.monitorenter.gui.chart.ZoomableChart;
import info.monitorenter.gui.chart.axis.AAxis;
import info.monitorenter.gui.chart.axis.AxisLinear;
import info.monitorenter.gui.chart.axis.scalepolicy.AxisScalePolicyManualTicks;
import info.monitorenter.gui.chart.labelformatters.LabelFormatterDate;
import info.monitorenter.gui.chart.labelformatters.LabelFormatterNumber;
import info.monitorenter.gui.chart.pointpainters.PointPainterDisc;
import info.monitorenter.gui.chart.rangepolicies.RangePolicyFixedViewport;
import info.monitorenter.gui.chart.traces.Trace2DLtd;
import info.monitorenter.gui.chart.traces.painters.TracePainterDisc;
import info.monitorenter.gui.chart.traces.painters.TracePainterFill;
import info.monitorenter.gui.chart.traces.painters.TracePainterLine;
import info.monitorenter.gui.chart.traces.painters.TracePainterVerticalBar;
import info.monitorenter.util.Range;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Stroke;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.colorchooser.ColorSelectionModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;

/**
 *
 * @author parasbhanot
 */
public class GraphForm_1 extends javax.swing.JFrame {

    /**
     * Creates new form GraphForm
     */
    public GraphForm_1() {

        initComponents();
        graphInitialize();
        closeListener();
        
        colorChoose_initial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        dialog = new javax.swing.JDialog();
        colorChooser = new javax.swing.JColorChooser();
        settingDialog = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        minSpin = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        maxSpin = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        tickSpin = new javax.swing.JSpinner();
        setRangeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        connectButton2 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        statusLabel2 = new javax.swing.JLabel();
        saveImageButton = new javax.swing.JButton();
        zoomButton = new javax.swing.JButton();
        clearbutton = new javax.swing.JButton();
        linesButton = new javax.swing.JRadioButton();
        VerticalButton = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        circleButton = new javax.swing.JRadioButton();
        defaultButton = new javax.swing.JButton();
        pickButton = new javax.swing.JButton();
        XgridButton = new javax.swing.JCheckBox();
        YgridButton = new javax.swing.JCheckBox();
        settingButton = new javax.swing.JButton();

        dialog.getContentPane().add(colorChooser, java.awt.BorderLayout.CENTER);

        jLabel2.setText("Minimum:");

        jLabel3.setText("Maximum:");

        jLabel4.setText("Ticks-gap:");

        setRangeButton.setText("set_Range");
        setRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRangeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(tickSpin)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(setRangeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(minSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(maxSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tickSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(setRangeButton)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        settingDialog.getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 500));

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 80));

        connectButton2.setText("Connect");
        connectButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Value:");

        statusLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        saveImageButton.setText("Save Image");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });

        zoomButton.setText("zoomOut");
        zoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomButtonActionPerformed(evt);
            }
        });

        clearbutton.setText("Clear");
        clearbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbuttonActionPerformed(evt);
            }
        });

        buttonGroup.add(linesButton);
        linesButton.setText("Lines");
        linesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linesButtonActionPerformed(evt);
            }
        });

        buttonGroup.add(VerticalButton);
        VerticalButton.setText("VerticalBar");
        VerticalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerticalButtonActionPerformed(evt);
            }
        });

        buttonGroup.add(jRadioButton3);
        jRadioButton3.setText("Fill");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup.add(circleButton);
        circleButton.setText("circle");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        defaultButton.setText("Default_Color");
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        pickButton.setText("PickColor");
        pickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickButtonActionPerformed(evt);
            }
        });

        XgridButton.setText("X-grid");
        XgridButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XgridButtonActionPerformed(evt);
            }
        });

        YgridButton.setText("Y-grid");
        YgridButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YgridButtonActionPerformed(evt);
            }
        });

        settingButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\parasbhanot\\Desktop\\utils\\normal.png")); // NOI18N
        settingButton.setRolloverIcon(new javax.swing.ImageIcon("C:\\Users\\parasbhanot\\Desktop\\utils\\hover.png")); // NOI18N
        settingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(connectButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveImageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pickButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(linesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VerticalButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(circleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(XgridButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(YgridButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(settingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(statusLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(linesButton)
                                    .addComponent(VerticalButton)
                                    .addComponent(jRadioButton3)
                                    .addComponent(circleButton)
                                    .addComponent(XgridButton)
                                    .addComponent(YgridButton))))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(connectButton2)
                            .addComponent(saveImageButton)
                            .addComponent(zoomButton)
                            .addComponent(clearbutton)
                            .addComponent(defaultButton)
                            .addComponent(pickButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(settingButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        settingButton.setBorderPainted(false);
        settingButton.setContentAreaFilled(false);
        settingButton.setOpaque(false);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButton2ActionPerformed

        if (connectButton2.isSelected()) {

            serialport = new SerialPort(port);

            try {
                serialport.openPort();
                serialport.setParams(9600, 8, 1, 0);
                serialport.setDTR(false);
                serialport.setRTS(false);

                statusLabel2.setForeground(Color.blue);
                statusLabel2.setText("Connected to " + serialport.getPortName());

            } catch (SerialPortException ex) {

                connectButton2.setSelected(false);
                statusLabel2.setForeground(Color.RED);
                statusLabel2.setText("Cannot connect");
            }

        } else {

            try {

                serialport.closePort();
                statusLabel2.setForeground(Color.darkGray);

                statusLabel2.setText("Disconnected : " + !serialport.isOpened());

                zoomflag = true;

                trace.setPointHighlighter(new PointPainterDisc(10));
                chart.setToolTipType(ToolTipType.VALUE_SNAP_TO_TRACEPOINTS);

            } catch (SerialPortException ex) {

                statusLabel2.setForeground(Color.RED);

                statusLabel2.setText("Port Cannot be closed");

            }

        }
        try {
            serialport.addEventListener(new SerialPortEventListener() {

                @Override
                public void serialEvent(SerialPortEvent e) {

                    if (e.isRXCHAR() && e.getEventValue() > 0) {

                        try {

                            String receivedData = serialport.readString(e
                                    .getEventValue());

                            int graphData = Integer.parseInt(receivedData);
                            
                            trace.addPoint(((double) System.currentTimeMillis() - startTime),
                                    graphData);

                            statusLabel2.setText(receivedData);

                        } catch (SerialPortException exp) {

                            statusLabel2.setText("Cannot receive data ");
                        }
                    }

                }
            });

        } catch (SerialPortException ex) {

        }


    }//GEN-LAST:event_connectButton2ActionPerformed

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed

        try {
            BufferedImage bi = chart.snapShot();
            ImageIO.write(bi, "JPEG", new File("chart.jpg"));
            JOptionPane.showMessageDialog(null, "Image saved");

        } catch (IOException ex) {

            JOptionPane.showMessageDialog(null, "Image cannot be saved");
        }

    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void zoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomButtonActionPerformed

        if (zoomflag == true) {

            chart.zoomAll();
        }
    }//GEN-LAST:event_zoomButtonActionPerformed

    private void clearbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbuttonActionPerformed
       
        //chart.zoomAll();
        trace.removeAllPoints();
        chart.revalidate();
        
        //chart.removeAllTraces();
        
        startTime = System.currentTimeMillis();
    }//GEN-LAST:event_clearbuttonActionPerformed

    private void linesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linesButtonActionPerformed
        
        trace.setTracePainter(new TracePainterLine());
        
    }//GEN-LAST:event_linesButtonActionPerformed

    private void VerticalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerticalButtonActionPerformed
       
        trace.setTracePainter(new TracePainterVerticalBar(chart));
    }//GEN-LAST:event_VerticalButtonActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        
        trace.setTracePainter(new TracePainterFill(chart));
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
        
        trace.setTracePainter(new TracePainterDisc(10));
    }//GEN-LAST:event_circleButtonActionPerformed

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
      
        trace.setColor(new Color(0, 142, 192));
        
    }//GEN-LAST:event_defaultButtonActionPerformed

    private void pickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickButtonActionPerformed
       
         dialog.setSize(700,450);
         dialog.setLocationRelativeTo(this);
         //dialog.setUndecorated(true);
         dialog.setVisible(true);
        
    }//GEN-LAST:event_pickButtonActionPerformed

    private void XgridButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XgridButtonActionPerformed
        
         IAxis<IAxisScalePolicy> axisX = (IAxis<IAxisScalePolicy>) chart
                    .getAxisX();
        
        if (XgridButton.isSelected()) {
                       
            axisX.setPaintGrid(true);
        }else{
            axisX.setPaintGrid(false);
        }
        
    }//GEN-LAST:event_XgridButtonActionPerformed

    private void YgridButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YgridButtonActionPerformed
        
          IAxis<IAxisScalePolicy> axisY = (IAxis<IAxisScalePolicy>) chart
                    .getAxisY();
        
        if (YgridButton.isSelected()) {
                       
            axisY.setPaintGrid(true);
        }else{
            axisY.setPaintGrid(false);
        }
        
    }//GEN-LAST:event_YgridButtonActionPerformed

    private void settingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingButtonActionPerformed
                             
         settingDialog.setSize(230,190);
         settingDialog.setLocationRelativeTo(this);
         //dialog.setUndecorated(true);
         settingDialog.setVisible(true);
        
        
    }//GEN-LAST:event_settingButtonActionPerformed

    private void setRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRangeButtonActionPerformed
      
        
        int min= (int) minSpin.getValue();
        int max= (int) maxSpin.getValue();
        int ticks=(int)tickSpin.getValue();
         
        IRangePolicy rangePolicy = new RangePolicyFixedViewport(new Range(min,
                max));
        
        AAxis<IAxisScalePolicy> scalePolicyY = new AxisLinear<IAxisScalePolicy>();
        scalePolicyY.setAxisScalePolicy(new AxisScalePolicyManualTicks());
        
        scalePolicyY.setMinorTickSpacing(ticks);   
        
        chart.getAxisY().setRangePolicy(rangePolicy);            
        
        chart.setAxisYLeft(scalePolicyY, 0);
        
    }//GEN-LAST:event_setRangeButtonActionPerformed

    private javax.swing.JFrame mainframe;
    public SerialPort serialport;

    public void recvMainframe(javax.swing.JFrame frame) {

        this.mainframe = frame;

    }

    private void closeListener() {

        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {

                mainframe.setVisible(true);
                dispose();
            }

        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton VerticalButton;
    private javax.swing.JCheckBox XgridButton;
    private javax.swing.JCheckBox YgridButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JRadioButton circleButton;
    private javax.swing.JButton clearbutton;
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JToggleButton connectButton2;
    private javax.swing.JButton defaultButton;
    private javax.swing.JDialog dialog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton linesButton;
    private javax.swing.JSpinner maxSpin;
    private javax.swing.JSpinner minSpin;
    private javax.swing.JButton pickButton;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JButton setRangeButton;
    private javax.swing.JButton settingButton;
    private javax.swing.JDialog settingDialog;
    private javax.swing.JLabel statusLabel2;
    private javax.swing.JSpinner tickSpin;
    private javax.swing.JButton zoomButton;
    // End of variables declaration//GEN-END:variables

    private long startTime = System.currentTimeMillis();
    private ITrace2D trace;
    // private Chart2D chart;
    
    private JScrollPane scrollPane;

    private ZoomableChart chart;
    boolean zoomflag = false;

    String port=null;
    
   public void givePort(String addPort){
       
       this.port=addPort;
   }
    
    private void graphInitialize() {

        //chart = new Chart2D();
        chart = new ZoomableChart();
        //ITrace2D trace = new Trace2DSimple();
        trace = new Trace2DLtd(100);
        trace.setColor(new Color(0, 142, 192));
        chart.addTrace(trace);

        //trace.setName("parasbhanot");
        chart.setPaintLabels(false); // parasbhanot will disappear

        chart.setBackground(Color.WHITE);
        chart.setForeground(Color.DARK_GRAY);
        chart.setGridColor(Color.LIGHT_GRAY);

        chart.setUseAntialiasing(true);
        chart.setFont(Font.getFont("Monospaced"));
        Stroke stk = new BasicStroke(1f);
        trace.setStroke(stk);

        IAxis<IAxisScalePolicy> axisX = (IAxis<IAxisScalePolicy>) chart
                .getAxisX();

        axisX.setPaintGrid(false);

        //axisX.setPaintScale(true);
        
        axisX.setFormatter(new LabelFormatterDate(new SimpleDateFormat(
                "ss")));

        IAxis<IAxisScalePolicy> axisY = (IAxis<IAxisScalePolicy>) chart
                .getAxisY();

        axisY.setPaintGrid(true);

        NumberFormat format = new DecimalFormat("#");
        format.setMaximumIntegerDigits(3);
        axisY.setFormatter(new LabelFormatterNumber(format));

        AAxis<IAxisScalePolicy> scalePolicyY = new AxisLinear<IAxisScalePolicy>();

        scalePolicyY.setAxisScalePolicy(new AxisScalePolicyManualTicks());

        scalePolicyY.setMinorTickSpacing(5);       
        
        chart.setAxisYLeft(scalePolicyY, 0);
        
        /////////////////////////////////////////
        AxisTitle ytitle = new AxisTitle("data");
        //scalePolicyY.setAxisTitle(ytitle);
        axisY.setAxisTitle(ytitle);

        AxisTitle xtitle = new AxisTitle("time-seconds");
        axisX.setAxisTitle(xtitle);
        

        IRangePolicy rangePolicy = new RangePolicyFixedViewport(new Range(0,
                100));
        chart.getAxisY().setRangePolicy(rangePolicy);
        
         
        linesButton.setSelected(true);
       
        trace.addPoint(0,0);           
        XgridButton.setSelected(false);
        YgridButton.setSelected(true);
        
        this.getContentPane().add(chart, BorderLayout.CENTER);

               
    }

    private void colorChoose_initial() {
       
         ColorSelectionModel model = colorChooser.getSelectionModel();
         ChangeListener changeListener=new ChangeListener(){

             @Override
             public void stateChanged(ChangeEvent e) {
                
                 trace.setColor(colorChooser.getColor());
             }
         };
         
          model.addChangeListener(changeListener);
    }
}
