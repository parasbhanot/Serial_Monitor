/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simpleSerial;

import java.awt.Color;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author parasbhanot
 */
public class subFrame extends javax.swing.JFrame {

    /**
     * Creates new form subFrame
     */
    public subFrame() {

        initComponents();
        setIcon();
        serial_Initialize();
        registerMysql();
    }

    private void serial_Initialize() {
        SerialPortList portLister = new SerialPortList();
        String[] portNames = portLister.getPortNames();

        for (String port : portNames) {

            portList.addItem(port);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        buttonPane = new javax.swing.JPanel();
        clearButton = new javax.swing.JButton();
        conButton = new javax.swing.JToggleButton();
        portList = new javax.swing.JComboBox();
        baudrate = new javax.swing.JComboBox();
        refreshButton = new javax.swing.JButton();
        readButton = new javax.swing.JButton();
        graphButton = new javax.swing.JButton();
        iconFrame = new javax.swing.JLabel();
        databaseSave = new javax.swing.JCheckBox();
        sendPanel = new javax.swing.JPanel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 2), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 2));
        jPanel3 = new javax.swing.JPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(3, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(3, 32767));
        sendField = new javax.swing.JTextField();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jButton2 = new javax.swing.JButton();
        displayPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextArea();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 5));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serial Monitor");
        setPreferredSize(new java.awt.Dimension(670, 400));

        controlPanel.setPreferredSize(new java.awt.Dimension(528, 80));

        status.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Stauts:");

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        conButton.setText("Connect");
        conButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conButtonActionPerformed(evt);
            }
        });

        portList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Port" }));
        portList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portListActionPerformed(evt);
            }
        });

        baudrate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1200", "2400", "4800", "9600", "12900", "38400", "57600", "115200" }));
        baudrate.setSelectedIndex(3);

        refreshButton.setText("refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        readButton.setText("Read Database");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        graphButton.setText("Graph");
        graphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphButtonActionPerformed(evt);
            }
        });

        iconFrame.setPreferredSize(new java.awt.Dimension(32, 32));

        javax.swing.GroupLayout buttonPaneLayout = new javax.swing.GroupLayout(buttonPane);
        buttonPane.setLayout(buttonPaneLayout);
        buttonPaneLayout.setHorizontalGroup(
            buttonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(baudrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(graphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        buttonPaneLayout.setVerticalGroup(
            buttonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPaneLayout.createSequentialGroup()
                .addGroup(buttonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(buttonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(conButton)
                            .addComponent(baudrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearButton)
                            .addComponent(refreshButton)
                            .addComponent(readButton)
                            .addComponent(graphButton)))
                    .addComponent(iconFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        databaseSave.setText("Database");
        databaseSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addComponent(buttonPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(databaseSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(databaseSave))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        getContentPane().add(controlPanel, java.awt.BorderLayout.PAGE_END);

        sendPanel.setPreferredSize(new java.awt.Dimension(443, 35));
        sendPanel.setLayout(new java.awt.BorderLayout());
        sendPanel.add(filler3, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));
        jPanel3.add(filler2);
        jPanel3.add(sendField);
        jPanel3.add(filler4);

        jButton2.setText("Send");
        jButton2.setPreferredSize(new java.awt.Dimension(70, 35));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        sendPanel.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(sendPanel, java.awt.BorderLayout.PAGE_START);

        displayPanel.setPreferredSize(new java.awt.Dimension(443, 160));
        displayPanel.setLayout(new java.awt.BorderLayout());

        displayArea.setColumns(20);
        displayArea.setRows(5);
        jScrollPane1.setViewportView(displayArea);

        displayPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        displayPanel.add(filler1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(displayPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed

        displayArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void conButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conButtonActionPerformed

        if (serialport == null) {

            JOptionPane.showMessageDialog(null, "select your port first");

            conButton.setSelected(false);

        } else {

            String baudRate = baudrate.getSelectedItem().toString();

            Integer baudget = Integer.parseInt(baudRate);

            connectDatabase();

            try {

                prepare = connect.prepareStatement("insert into serialdatabase.serialmonitor (counter) values (?)");

            } catch (SQLException ex) {

                JOptionPane.showMessageDialog(null, "cannot create Statement");
            }

            if (conButton.isSelected()) {

                try {

                    serialport.openPort();

                    serialport.setParams(baudget, 8, 1, 0);
                    serialport.setDTR(false);
                    serialport.setRTS(false);

                    iconFrame.setIcon(iconYes);

                    status.setForeground(Color.blue);
                    status.setText("Connected to " + serialport.getPortName());

                    iconFrame.setVisible(true);

                } catch (SerialPortException ex) {

                    conButton.setSelected(false);

                    status.setForeground(Color.RED);

                    status.setText("Cannot connect");
                }

            } else {

                try {

                    serialport.closePort();

                    status.setForeground(Color.darkGray);

                    status.setText("Disconnected : " + !serialport.isOpened());

                    iconFrame.setIcon(iconNO);

                } catch (SerialPortException ex) {

                    status.setForeground(Color.RED);

                    status.setText("Port Cannot be closed");

                }
            }

            try {
                serialport.addEventListener(new SerialPortEventListener() {

                    @Override
                    public void serialEvent(SerialPortEvent e) {

                        if (e.isRXCHAR() && e.getEventValue() > 0) {

                            try {

                                String receivedData = serialport.readString(e
                                        .getEventValue());

                                if (databaseSave.isSelected()) {
                                    try {
                                        
                                        prepare.setString(1, receivedData);
                                        prepare.execute();
                                        
                                    } catch (SQLException ex) {
                                        
                                        JOptionPane.showMessageDialog(null, "cannot insert");
                                    }
                                }

                                displayArea.append(receivedData + "\n");
                                //displayArea.setText(receivedData);

                            } catch (SerialPortException exp) {

                                status.setText("Cannot receive data ");
                            }
                        }

                    }
                });

            } catch (SerialPortException ex) {

            }

        }
    }//GEN-LAST:event_conButtonActionPerformed

    private void portListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portListActionPerformed

        String port = portList.getSelectedItem().toString();
        sendPort(port);
        graphPort=port;
        
    }//GEN-LAST:event_portListActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String data = sendField.getText();

        try {
            serialport.writeBytes(data.getBytes());

        } catch (SerialPortException ex) {

            JOptionPane.showMessageDialog(null, "Cannot send data");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed

        int count = portList.getItemCount() - 1;

        while (count != 0) {

            portList.removeItemAt(count);

            count--;
        }

        SerialPortList portLister = new SerialPortList();
        String[] portNames = portLister.getPortNames();

        for (String port : portNames) {

            portList.addItem(port);

        }

    }//GEN-LAST:event_refreshButtonActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed

        this.setVisible(false);
        TabelForm tableform = new TabelForm();
        tableform.setLocationRelativeTo(null);
        tableform.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        tableform.recFrame(this);

        tableform.setVisible(true);

    }//GEN-LAST:event_readButtonActionPerformed

    private void graphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphButtonActionPerformed
      
         this.setVisible(false);
         GraphForm_1 graphframe=new GraphForm_1();
         graphframe.setLocationRelativeTo(null);
         graphframe.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         graphframe.recvMainframe(this);
         graphframe.givePort(graphPort);
         graphframe.setVisible(true);
         
    }//GEN-LAST:event_graphButtonActionPerformed

    private void databaseSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseSaveActionPerformed
        
        if(databaseSave.isSelected()){
            
            readButton.setEnabled(true);
        }else{
            
            readButton.setEnabled(false);
        }
        
        
    }//GEN-LAST:event_databaseSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(subFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(subFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(subFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(subFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new subFrame().setVisible(true);
            }
        });
    }

    SerialPort serialport;

    DefaultCaret caret;

    private void sendPort(String port) {

        serialport = new SerialPort(port);

        caret = (DefaultCaret) displayArea.getCaret();

        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

    }

    ImageIcon iconYes = new ImageIcon("images/yes.png");
    ImageIcon iconNO = new ImageIcon("images/warn.png");


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox baudrate;
    private javax.swing.JPanel buttonPane;
    private javax.swing.JButton clearButton;
    private javax.swing.JToggleButton conButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JCheckBox databaseSave;
    private javax.swing.JTextArea displayArea;
    private javax.swing.JPanel displayPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.JButton graphButton;
    private javax.swing.JLabel iconFrame;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox portList;
    private javax.swing.JButton readButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField sendField;
    private javax.swing.JPanel sendPanel;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables

    Properties properties = null;
    Connection connect = null;
    PreparedStatement prepare = null;

    String username = null;
    String password = null;
    String url = null;

    String retvData = "select * from serialdatabase.serialmonitor";
    
    String graphPort=null;

    private void setIcon() {

        setLocationRelativeTo(null);  // centre jframe 
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("images\\usb.png"));        
        databaseSave.setSelected(false);
        readButton.setEnabled(false);
    }

    private void registerMysql() {

        try {

            Class.forName("com.mysql.jdbc.Driver");
            properties = new Properties();
            properties.load(new FileInputStream("database.properties"));

            username = properties.getProperty("user");
            password = properties.getProperty("password");
            url = properties.getProperty("dburl");

        } catch (ClassNotFoundException ex) {

            JOptionPane.showMessageDialog(null, "jdbc driver cannot be loaded");

        } catch (IOException ex) {

            JOptionPane.showMessageDialog(null, "properties file not found");
        }

    }

    private void connectDatabase() {

        try {

            connect = DriverManager.getConnection(url, username, password);

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, "cannot connect");
        }

    }

    private void closedatabase() {

        try {

            connect.close();

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, "cannot close");
        }

    }

}
