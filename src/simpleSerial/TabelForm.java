/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simpleSerial;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author parasbhanot
 */
public class TabelForm extends javax.swing.JFrame {

    /**
     * Creates new form TabelForm
     */
    public TabelForm() {

        initComponents();
        setModel();
        registerMysql();
        construct();
        closeListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        backButtton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        clearbaseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "channel 1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(displayTable);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        backButtton.setText("Go Back");
        backButtton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButttonActionPerformed(evt);
            }
        });
        jPanel1.add(backButtton);

        loadButton.setText("reload Database");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        jPanel1.add(loadButton);

        clearbaseButton.setText("Clear Database");
        clearbaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbaseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(clearbaseButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearbaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbaseButtonActionPerformed

        String del = "delete from serialdatabase.serialmonitor";
        
        // reset auto-increment primary key 
        String autoIncrement="ALTER TABLE serialdatabase.serialmonitor AUTO_INCREMENT = 1";

        try {
            connect = DriverManager.getConnection(url, username, password);

            Statement statement = (Statement) connect.createStatement();

            statement.executeUpdate(del);
             statement.executeUpdate(autoIncrement);
            
            refreshDatabase(statement);

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, "cannot connect");

        } finally {

            try {

                connect.close();

            } catch (SQLException ex) {

                JOptionPane.showMessageDialog(null, "cannot close connection");
            }
        }


    }//GEN-LAST:event_clearbaseButtonActionPerformed

    private void backButttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButttonActionPerformed

        mainframe.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_backButttonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed

        model.setRowCount(0);

        Statement statement;
        try {

            connect = DriverManager.getConnection(url, username, password);
            statement = connect.createStatement();
            ResultSet result = statement.executeQuery(retvData);

            while (result.next()) {

                String a = result.getString("idserialmonitor");
                String b = result.getString("counter");

                model.addRow(new Object[]{a, b});

            }

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, "cannot retrive the result");

        } finally {

            try {
                connect.close();

            } catch (SQLException ex) {

                JOptionPane.showMessageDialog(null, "cannot close connection");
            }
    }//GEN-LAST:event_loadButtonActionPerformed
    }
    /**
         * @param args the command line arguments
         */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TabelForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TabelForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TabelForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabelForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TabelForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButtton;
    private javax.swing.JButton clearbaseButton;
    private javax.swing.JTable displayTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JFrame mainframe;

    DefaultTableModel model;
    Properties properties = null;
    Connection connect = null;

    String username = null;
    String password = null;
    String url = null;

    String retvData = "select * from serialdatabase.serialmonitor";

    private void setModel() {

        model = (DefaultTableModel) displayTable.getModel();

        displayTable.setModel(model);
    }

    private void registerMysql() {
        try {

            Class.forName("com.mysql.jdbc.Driver");
            properties = new Properties();
            properties.load(new FileInputStream("database.properties"));

            username = properties.getProperty("user");
            password = properties.getProperty("password");
            url = properties.getProperty("dburl");

        } catch (ClassNotFoundException ex) {

            JOptionPane.showMessageDialog(null, "jdbc driver cannot be loaded");

        } catch (IOException ex) {

            JOptionPane.showMessageDialog(null, "properties file not found");
        }
    }

    private void refreshDatabase(Statement statement) throws SQLException {

        model.setRowCount(0);

        ResultSet result = statement.executeQuery(retvData);

        while (result.next()) {

            String a = result.getString("idserialmonitor");
            String b = result.getString("counter");

            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {

                    model.addRow(new Object[]{a, b});

                    displayTable.changeSelection(displayTable.getRowCount() - 1,
                            0, false, false);
                }
            });

        }
    }

    public void recFrame(javax.swing.JFrame frame) {

        this.mainframe = frame;
    }

    private void construct() {

        model.setRowCount(0);

        Statement statement;
        try {
            
            connect = DriverManager.getConnection(url, username, password);
            statement = connect.createStatement();
            ResultSet result = statement.executeQuery(retvData);
            
             while (result.next()) {

            String a = result.getString("idserialmonitor");
            String b = result.getString("counter");

            model.addRow(new Object[]{a, b});

        }

        } catch (SQLException ex) {
            
            JOptionPane.showMessageDialog(null,"cannot retrive the result");
                    
        }
        
        finally{
            
            try {
                connect.close();
                
            } catch (SQLException ex) {
                
                JOptionPane.showMessageDialog(null,"cannot close connection");
        }
            
    }
        
    }

    private void closeListener() {
        
        this.addWindowListener(new WindowAdapter() {
                        
              public void windowClosing(WindowEvent e) {
                
                  mainframe.setVisible(true);                  
                  dispose();
            }
            
        });
        
    }
    

}
